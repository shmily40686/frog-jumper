{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/frog_jumper.js","webpack:///./lib/game.js","webpack:///./lib/background.js","webpack:///./lib/player.js","webpack:///./lib/mushroom.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;ACnEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,E;;;;;;ACnBD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wC;AACA,8E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,4B;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wB;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,S;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0B","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const Game = require('./game.js');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const gameCanvas = document.getElementById('game-canvas');\n    const gameCanvasContext = gameCanvas.getContext('2d');\n\n    const backgroundCanvas = document.getElementById('background-canvas');\n    const backgroundCanvasContext = backgroundCanvas.getContext('2d');\n\n    // const foregroundCanvas = document.getElementById('foreground-canvas');\n    // const foregroundCanvasContext = foregroundCanvas.getContext('2d');\n\n    const game = new Game(\n        gameCanvasContext,\n        gameCanvas,\n        backgroundCanvasContext)\n    \n    game.draw();\n    window.addEventListener('keydown', game.jump);\n});","const Background = require('./background.js');\nconst Player = require('./player');\nconst Mushroom = require('./mushroom');\n\nclass Game {\n    constructor(ctx, gameCanvas, backgroundCtx, foregroundCtx) {\n        this.ctx = ctx;\n        this.gameCanvas = gameCanvas;\n        this.backgroundCtx = backgroundCtx;\n        this.foregroundCtx = foregroundCtx;\n        this.start = \"stop\"\n        \n        this.jump = this.jump.bind(this);\n        this.draw = this.draw.bind(this);\n        // this.resetGame = this.resetGame.bind(this);\n\n        this.createBackground(backgroundCtx, foregroundCtx);\n        this.createPlayer(ctx)\n        this.createMushroom(ctx)\n        // setInterval(() => {\n        //     this.player.selfJump()\n        // }, 1500);\n\n        // this.setButtonListeners();\n    }\n\n    jump(event) {\n        if (event.code === \"Space\" ) {\n            event.preventDefault();\n            this.player.performJump()\n            this.start = \"start\"\n        }\n    }\n\n    // setButtonListeners() {\n    //     console.log(this.gameCanvas); \n    //     this.gameCanvas.addEventListener('click', () => console.log('hi')); \n    //     this.gameCanvas.addEventListener('keydown', this.jump);\n    //     // window.addEventListener('click', () => console.log('hello'))\n    //     // this.gameCanvas.addEventListener('keydown', this.resetGame);\n    // }\n\n    createBackground(backgroundCtx, foregroundCtx) {\n        const backgroundImage = new Image();\n        // backgroundImage.src = './assets/images/sky.jpg';\n        backgroundImage.src = './assets/images/background.png';\n        // backgroundImage.src = 'https://freedesignfile.com/upload/2016/03/Grass-with-blue-sky-spring-vectors-01.jpg'\n        this.background = new Background(backgroundCtx, backgroundImage, 0, 750, 0.8);\n        this.preBackground = new Background(backgroundCtx, backgroundImage, 0, 750, 0)\n\n        // const foregroundImage = new Image();\n        // foregroundImage.src = './assets/images/grass_bg.png';\n        // this.foreground = new Background(foregroundCtx, foregroundImage, 0, 750, 6);\n    }\n\n    createPlayer(ctx) {\n        const frogImage = new Image()\n        frogImage.src = './assets/images/frog.png'\n        this.player = new Player(ctx,frogImage,440,5)\n    }\n\n    createMushroom(ctx) {\n       const mushroomImage = new Image()\n       mushroomImage.src = './assets/images/mushroom.png';\n       this.mushroom1 = new Mushroom(ctx,mushroomImage,800,440, 4)\n       this.mushroom2 = new Mushroom(ctx, mushroomImage, 1200, 440, 4)\n    }\n\n    draw() {\n        requestAnimationFrame(this.draw);\n        if(this.start === \"stop\") {\n            this.preBackground.draw() \n            this.player.draw();\n        } else if (this.start === \"start\") {\n            this.background.draw();\n            this.player.draw();\n            this.mushroom1.draw();\n            this.mushroom2.draw(); \n            // calculate was there collision\n            //\n            // player position\n            const player = this.player.getPosition();\n            // mushroom positions\n            const mushrooms = [\n                this.mushroom1.getPosition(),\n                this.mushroom2.getPosition(),\n            ];\n\n            // .some on [mushrooms] was there collision?\n            if (mushrooms.some(mushroom => {\n                let spacing = 70;\n                let tolerance = 50;\n\n               if (mushroom[0] > player[0] + spacing || player[0] - mushroom[0] >= spacing) {\n                   // collision not possible\n                   return false;\n               } else {\n                   // player can collide with mushroom\n                   if (mushroom[0] > player[0]) {\n                       // Mushroom is to the right, player can run into mushroom or land on it.\n                       return mushroom[0] + mushroom[1] < player[0] + player[1] + spacing;\n                   } else {\n                       // Frog is to the right of the mushroom.\n                       return Math.abs(player[0] - mushroom[0]) + Math.abs(player[1] - mushroom[1]) + (tolerance / 8) < spacing;\n                   }\n               }\n            })) {\n                // stop\n                this.stopPlaying();\n            }\n        } else if (this.start === \"die\") {\n            return \n        }\n\n    }\n\n    stopPlaying() {\n        this.start = \"die\";\n        const cover = document.createElement(\"div\")\n        const button = document.createElement(\"button\")\n        const dom = document.getElementsByClassName(\"main-div\")[0]\n        cover.classList.add(\"cover-die\");\n        button.classList.add(\"cover-die-button\");\n        button.innerText = \"Restart\"\n        cover.appendChild(button)\n        dom.appendChild(cover)\n\n        button.addEventListener(\"click\", () => {\n            console.log(\"dom\",dom)\n            console.log(\"cover\", cover)\n            dom.removeChild(cover)\n            this.start = \"start\"\n        })\n    }\n}\n\nmodule.exports = Game;\n","class Background {\n    constructor(ctx, image, posY, imageLength, speed) {\n        this.image = image;\n        this.speed = speed;\n        this.x = 0;\n        this.y = posY;\n        this.imageLength = imageLength;\n        this.ctx = ctx;\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, 800, 600);\n        // this.image.width = 100\n        // this.image.height = 100\n        this.ctx.drawImage(this.image, this.x, this.y, 820, 600);\n        this.ctx.drawImage(this.image, this.x + this.imageLength, this.y, 820, 600);\n        this.ctx.drawImage(this.image, this.x + this.imageLength * 2, this.y, 820, 600);\n        if (this.x <= -this.imageLength) {\n            this.x = 0;\n        }\n        this.scrollImage();\n    }\n\n    scrollImage() {\n        this.x -= this.speed;\n    }\n\n}\n\nmodule.exports = Background;","class Player {\n    constructor(ctx, image, posY,speed) {\n        this.ctx = ctx;\n        this.image = image;\n        this.speed = speed;\n        this.isJump = true\n        this.x = 100;\n        this.y = posY;\n        this.jumping = false;\n        this.size = [100,100];\n\n        this.jumpImage = this.jumpImage.bind(this);\n        this.jumping = false;\n        this.selfJumpImg = this.selfJumpImg.bind(this);\n        this.sefJumping = false;\n        this.getPosition = this.getPosition.bind(this);\n\n    }\n\n    draw() {\n        this.ctx.clearRect(0, 0, 800, 600);\n        this.ctx.drawImage(this.image, this.x, this.y, this.size[0], this.size[1]);\n    }\n\n    selfJump() {\n        this.jumping = true;\n        this.jumpImage()\n    }\n\n    selfJumpImg() {\n        const gravity = 0.40;\n        const initialSpeed = 12;\n        if (this.y > 600 && this.jumping) {\n            this.y -= initialSpeed - gravity;\n            requestAnimationFrame(this.selfJumpImg)\n        } else {\n            this.jumping = false\n            if (this.y >= 440) {\n                return\n            } else {\n                this.y += this.speed;\n                requestAnimationFrame(this.selfJumpImg)\n            }\n        }\n    }\n\n    performJump() {\n        this.jumping = true;\n        this.jumpImage()\n    }\n\n    jumpImage() {\n        const gravity = 0.40;\n        const initialSpeed = 12;\n        if (this.y > 200 && this.jumping) {\n            this.y -= initialSpeed - gravity ;\n            requestAnimationFrame(this.jumpImage)\n        } else {\n            this.jumping = false\n            if (this.y >= 440) {\n                return\n            } else {\n                this.y += this.speed;\n                requestAnimationFrame(this.jumpImage)\n            }\n        }\n    }\n\n    getPosition() {\n        return [this.x, this.y];\n    }\n}\n\nmodule.exports = Player;","class Mushroom {\n    constructor(ctx, image,x, y, speed) {\n        this.ctx = ctx;\n        this.image = image;\n        this.x = x;\n        this.y = y;\n        this.speed = speed;\n        this.size = [100, 100];\n        this.getPosition = this.getPosition.bind(this);\n    }  \n\n    move() {\n        this.x -= this.speed;\n        setInterval(() => {\n            this.speed += 0.0001\n        },50000)\n        if(this.x < -100) {\n            this.x = 800\n        } \n    }\n\n    draw(ctx) {\n        // this.ctx.clearRect(0, 0, 800, 600);\n        this.ctx.drawImage(this.image, this.x, this.y, this.size[0], this.size[1]);\n        this.move()\n    }\n\n    getPosition() {\n        return [this.x, this.y];\n    }\n}\n\nmodule.exports = Mushroom;"],"sourceRoot":""}